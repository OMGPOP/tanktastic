// Generated by CoffeeScript 1.3.3
(function() {
  var Bar, Player, Printer, Tournament, fs, name, num_matches, path, seed, t, tank, tanks, tournament, tourney_dir, _ref;

  require("./seedrandom.js");

  Bar = require("./node-progress.js");

  t = require("./tanktastic.js");

  fs = require("fs");

  Player = (function() {

    function Player(name) {
      this.name = name;
      this.elo = 1000;
      this.wins = this.losses = this.ties = 0;
    }

    Player.prototype.add_result = function(result) {
      if (result < 0.5) {
        return this.losses++;
      } else if (result > 0.5) {
        return this.wins++;
      } else {
        return this.ties++;
      }
    };

    return Player;

  })();

  Printer = (function() {

    function Printer() {}

    Printer.add_cell = function(len, value) {
      return "| " + this.add_tabular(len, value.toString(), " ");
    };

    Printer.add_line = function(len, cols, spacer) {
      var i;
      if (spacer == null) {
        spacer = "-";
      }
      return ((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; 1 <= cols ? _i <= cols : _i >= cols; i = 1 <= cols ? ++_i : --_i) {
          _results.push("+" + this.add_tabular(len + 1, "", spacer));
        }
        return _results;
      }).call(this)).join("") + "+\n";
    };

    Printer.add_tabular = function(len, value, spacer) {
      var i;
      return value + ((function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = len - value.length + 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push(spacer);
        }
        return _results;
      })()).join("");
    };

    Printer.print = function(players) {
      var i, k, longest, output, player, results, v, _i, _j, _len, _len1;
      output = "\n  Results:\n\n";
      results = [];
      for (k in players) {
        v = players[k];
        results.push(v);
      }
      results.sort(function(a, b) {
        return b.wins - a.wins;
      });
      longest = 10;
      for (i = _i = 0, _len = results.length; _i < _len; i = ++_i) {
        player = results[i];
        output += "    " + (i + 1) + ". " + player.name + "\n";
        if (player.name.length > longest) {
          longest = player.name.length;
        }
      }
      output += "\n";
      output += this.add_line(longest, 5);
      output += this.add_cell(longest, "Tank");
      output += this.add_cell(longest, "Wins");
      output += this.add_cell(longest, "Losses");
      output += this.add_cell(longest, "Ties");
      output += this.add_cell(longest, "ELO");
      output += "|\n";
      output += this.add_line(longest, 5);
      for (_j = 0, _len1 = results.length; _j < _len1; _j++) {
        player = results[_j];
        output += this.add_cell(longest, player.name);
        output += this.add_cell(longest, player.wins);
        output += this.add_cell(longest, player.losses);
        output += this.add_cell(longest, player.ties);
        output += this.add_cell(longest, Math.round(player.elo));
        output += "|\n";
      }
      output += this.add_line(longest, 5);
      return console.log(output);
    };

    return Printer;

  })();

  Tournament = (function() {

    function Tournament(tanks) {
      this.tanks = tanks;
      this.stats = {};
      this.players = {};
    }

    Tournament.prototype.hash = function(a, b) {
      return a.name + "-" + b.name;
    };

    Tournament.prototype.run = function() {
      var i, j, n, tank_i, tank_j, _i, _len, _ref, _results;
      n = this.tanks.length;
      this.bar = new Bar("  Running Tournament [:bar] :percent :etas", {
        total: num_matches * ((n * n - n) / 2),
        width: 20
      });
      _ref = this.tanks.slice(0, (n - 2) + 1 || 9e9);
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        tank_i = _ref[i];
        if (!this.players[tank_i.name]) {
          this.players[tank_i.name] = new Player(tank_i.name);
        }
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = this.tanks.slice(i + 1, (n - 1) + 1 || 9e9);
          _results1 = [];
          for (j = _j = 0, _len1 = _ref1.length; _j < _len1; j = ++_j) {
            tank_j = _ref1[j];
            if (!this.players[tank_j.name]) {
              this.players[tank_j.name] = new Player(tank_j.name);
            }
            this.run_match(tank_i, tank_j);
            _results1.push(this.bar.tick());
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Tournament.prototype.run_match = function(ti, tj) {
      var dt, game, i, loser, result, shash, tip, tjp, winner, _i, _ref;
      shash = this.hash(ti, tj);
      tip = this.players[ti.name];
      tjp = this.players[tj.name];
      this.stats[shash] = {
        ties: tip.ties
      };
      this.stats[shash][ti.name] = tip.wins;
      this.stats[shash][tj.name] = tjp.wins;
      for (i = _i = 1; 1 <= num_matches ? _i <= num_matches : _i >= num_matches; i = 1 <= num_matches ? ++_i : --_i) {
        game = new t.tanktastic.Game(seed + i);
        game.register_tank(ti);
        game.register_tank(tj);
        game.init();
        while (!game.is_complete()) {
          game.step();
        }
        _ref = game.podium(), winner = _ref[0], loser = _ref[1];
        dt = winner.life - loser.life;
        result = Number((dt === 0 ? 0.5 : 0.5 + 0.5 * dt / Math.abs(dt)).toFixed(1));
        this.players[winner.name].add_result(result);
        this.players[loser.name].add_result(1 - result);
        this.update_elo(this.players[winner.name], this.players[loser.name], result);
        this.bar.tick();
      }
      this.stats[shash].ties = tip.ties - this.stats[shash].ties;
      this.stats[shash][ti.name] = tip.wins - this.stats[shash][ti.name];
      return this.stats[shash][tj.name] = tjp.wins - this.stats[shash][tj.name];
    };

    Tournament.prototype.update_elo = function(a, b, result) {
      var ea, eb, k;
      ea = 1 / (1 + Math.pow(10, (b.elo - a.elo) / 400));
      eb = 1 - ea;
      k = 30;
      a.elo += k * (result - ea);
      return b.elo += k * ((1 - result) - eb);
    };

    return Tournament;

  })();

  _ref = process.argv, name = _ref[0], path = _ref[1], tourney_dir = _ref[2], num_matches = _ref[3], seed = _ref[4];

  tanks = (function() {
    var _i, _len, _ref1, _results;
    _ref1 = fs.readdirSync(tourney_dir);
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      tank = _ref1[_i];
      _results.push(require("./" + tourney_dir + tank));
    }
    return _results;
  })();

  tournament = new Tournament(tanks);

  tournament.run();

  Printer.print(tournament.players);

}).call(this);
