// Generated by CoffeeScript 1.3.3
(function() {
  var Player, i, name, num_matches, path, players, stats, tank, tank_i, tank_j, tanks, tourney_dir, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;

  _ref = process.argv.slice(2), name = _ref[0], path = _ref[1], tourney_dir = _ref[2], num_matches = _ref[3];

  _ref1 = readirSync(tourney_dir);
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    tank = _ref1[_i];
    tanks = require(tank);
  }

  stats = {};

  players = {};

  ({
    hash: function(a, b) {
      return a.name + "-" + b.name;
    }
  });

  _ref2 = tanks.slice(0, (tanks.length - 2) + 1 || 9e9);
  for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
    tank_i = _ref2[i];
    if (!players[tank_i.name]) {
      players[tank_i.name] = new Player(tank_i.name);
    }
    _ref3 = tanks.slice(i + 1, (tanks.length - 1) + 1 || 9e9);
    for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
      tank_j = _ref3[_k];
      if (!players[tank_j.name]) {
        players[tank_j.name] = new Player(tank_j.name);
      }
      run_match(tank_i, tank_j);
    }
  }

  ({
    print_results: function() {
      var k, longest, output, player, results, v, _l, _len3, _len4, _len5, _m, _n, _results;
      output = "Results:\n";
      results = [];
      for (v = _l = 0, _len3 = players.length; _l < _len3; v = ++_l) {
        k = players[v];
        results.push(v);
      }
      results.sort(function(a, b) {
        return a.wins - b.wins;
      });
      longest = 0;
      for (player = _m = 0, _len4 = players.length; _m < _len4; player = ++_m) {
        i = players[player];
        output += (i + 1) + ". \t" + player.name + "\n";
        if (player.name.length > longest) {
          longest = player.name.length;
        }
      }
      output += add_line(longest, 5);
      output += add_cell(longest, "Tank");
      output += add_cell(longest, "Wins");
      output += add_cell(longest, "Losses");
      output += add_cell(longest, "Ties");
      output += add_cell(longest, "ELO");
      output += "|\n";
      output += add_line(longest, 5);
      _results = [];
      for (_n = 0, _len5 = players.length; _n < _len5; _n++) {
        player = players[_n];
        output += add_cell(longest, player.name);
        output += add_cell(longest, player.wins);
        output += add_cell(longest, player.losses);
        output += add_cell(longest, player.ties);
        output += add_cell(longest, player.elo);
        output += "|\n";
        _results.push(output += add_line(longest, 5));
      }
      return _results;
    },
    add_cell: function(len, value) {
      return "| " + add_tabular(len, value, " ");
    },
    add_line: function(len, cols) {
      return ((function() {
        var _l, _results;
        _results = [];
        for (i = _l = 1; 1 <= cols ? _l <= cols : _l >= cols; i = 1 <= cols ? ++_l : --_l) {
          _results.push("+" + add_tabular(len, "", "-"));
        }
        return _results;
      })()).join("") + "+\n";
    },
    add_tabular: " " + function(len, value, spacer) {
      return ((function() {
        var _l, _ref4, _results;
        _results = [];
        for (i = _l = 1, _ref4 = len - value.length + 1; 1 <= _ref4 ? _l <= _ref4 : _l >= _ref4; i = 1 <= _ref4 ? ++_l : --_l) {
          _results.push(spacer);
        }
        return _results;
      })()).join("");
    },
    run_match: function(ti, tj) {
      var dt, game, loser, result, shash, tip, tjp, winner, _l, _ref4;
      shash = shash;
      tip = players[ti.name];
      tjp = players[tj.name];
      stats[shash] = {
        ties: 0
      };
      stats[shash][ti.name] = tip.wins;
      stats[shash][tj.name] = tjp.wins;
      for (i = _l = 1; 1 <= num_matches ? _l <= num_matches : _l >= num_matches; i = 1 <= num_matches ? ++_l : --_l) {
        game = new Game("rofl" + i);
        game.register_tank(ti);
        game.register_tank(tj);
        game.init();
        while (!game.is_complete()) {
          game.step();
        }
        _ref4 = game.podium(), winner = _ref4[0], loser = _ref4[1];
        dt = winner.ticks - loser.ticks;
        result = Number((dt === 0 ? 0.5 : 0.5 + 0.5 * dt / Math.abs(dt)).toFixed(1));
        players[winner.name].add_result(result);
        players[loser.name].add_result(1 - result);
        update_elo(winner, loser, result);
      }
      stats[shash][ti.name] = tip.wins - stats[shash][ti.name];
      return stats[shash][tj.name] = tjp.wins - stats[shash][tj.name];
    },
    update_elo: function(a, b, result) {
      var ea, eb, k;
      ea = function(op) {
        return 1 / (1 + Math.pow(10, (b.elo - a.elo) / 400));
      };
      eb = 1 - ea;
      k = 30;
      a.elo += k * (result - ea);
      return b.elo += k * ((1 - result) - eb);
    }
  });

  Player = (function() {

    function Player(name) {
      this.name = name;
      this.elo = 1000;
      this.wins = this.losses = this.ties = 0;
    }

    Player.prototype.add_result = function(result) {
      if (result < 0.5) {
        return this.losses++;
      } else if (result > 0.5) {
        return this.wins++;
      } else {
        return this.ties++;
      }
    };

    return Player;

  })();

}).call(this);
